// third_party/blink/public/mojom/agents/agent_metrics.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/agents/agent_metrics.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');



  function AgentMetricsData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AgentMetricsData.prototype.initDefaults_ = function() {
    this.agents = null;
  };
  AgentMetricsData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AgentMetricsData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AgentMetricsData.agents
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AgentMetricsData.encodedSize = codec.kStructHeaderSize + 8;

  AgentMetricsData.decode = function(decoder) {
    var packed;
    var val = new AgentMetricsData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.agents =
        decoder.decodeArrayPointer(codec.String);
    return val;
  };

  AgentMetricsData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AgentMetricsData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.String, val.agents);
  };
  function AgentMetricsCollectorHost_ReportRendererMetrics_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AgentMetricsCollectorHost_ReportRendererMetrics_Params.prototype.initDefaults_ = function() {
    this.data = null;
  };
  AgentMetricsCollectorHost_ReportRendererMetrics_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AgentMetricsCollectorHost_ReportRendererMetrics_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AgentMetricsCollectorHost_ReportRendererMetrics_Params.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, AgentMetricsData, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AgentMetricsCollectorHost_ReportRendererMetrics_Params.encodedSize = codec.kStructHeaderSize + 8;

  AgentMetricsCollectorHost_ReportRendererMetrics_Params.decode = function(decoder) {
    var packed;
    var val = new AgentMetricsCollectorHost_ReportRendererMetrics_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStructPointer(AgentMetricsData);
    return val;
  };

  AgentMetricsCollectorHost_ReportRendererMetrics_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AgentMetricsCollectorHost_ReportRendererMetrics_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(AgentMetricsData, val.data);
  };
  var kAgentMetricsCollectorHost_ReportRendererMetrics_Name = 0;

  function AgentMetricsCollectorHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(AgentMetricsCollectorHost,
                                                   handleOrPtrInfo);
  }

  function AgentMetricsCollectorHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        AgentMetricsCollectorHost, associatedInterfacePtrInfo);
  }

  AgentMetricsCollectorHostAssociatedPtr.prototype =
      Object.create(AgentMetricsCollectorHostPtr.prototype);
  AgentMetricsCollectorHostAssociatedPtr.prototype.constructor =
      AgentMetricsCollectorHostAssociatedPtr;

  function AgentMetricsCollectorHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  AgentMetricsCollectorHostPtr.prototype.reportRendererMetrics = function() {
    return AgentMetricsCollectorHostProxy.prototype.reportRendererMetrics
        .apply(this.ptr.getProxy(), arguments);
  };

  AgentMetricsCollectorHostProxy.prototype.reportRendererMetrics = function(data) {
    var params_ = new AgentMetricsCollectorHost_ReportRendererMetrics_Params();
    params_.data = data;
    var builder = new codec.MessageV0Builder(
        kAgentMetricsCollectorHost_ReportRendererMetrics_Name,
        codec.align(AgentMetricsCollectorHost_ReportRendererMetrics_Params.encodedSize));
    builder.encodeStruct(AgentMetricsCollectorHost_ReportRendererMetrics_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function AgentMetricsCollectorHostStub(delegate) {
    this.delegate_ = delegate;
  }
  AgentMetricsCollectorHostStub.prototype.reportRendererMetrics = function(data) {
    return this.delegate_ && this.delegate_.reportRendererMetrics && this.delegate_.reportRendererMetrics(data);
  }

  AgentMetricsCollectorHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAgentMetricsCollectorHost_ReportRendererMetrics_Name:
      var params = reader.decodeStruct(AgentMetricsCollectorHost_ReportRendererMetrics_Params);
      this.reportRendererMetrics(params.data);
      return true;
    default:
      return false;
    }
  };

  AgentMetricsCollectorHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateAgentMetricsCollectorHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAgentMetricsCollectorHost_ReportRendererMetrics_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AgentMetricsCollectorHost_ReportRendererMetrics_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAgentMetricsCollectorHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var AgentMetricsCollectorHost = {
    name: 'blink.mojom.AgentMetricsCollectorHost',
    kVersion: 0,
    ptrClass: AgentMetricsCollectorHostPtr,
    proxyClass: AgentMetricsCollectorHostProxy,
    stubClass: AgentMetricsCollectorHostStub,
    validateRequest: validateAgentMetricsCollectorHostRequest,
    validateResponse: null,
  };
  AgentMetricsCollectorHostStub.prototype.validator = validateAgentMetricsCollectorHostRequest;
  AgentMetricsCollectorHostProxy.prototype.validator = null;
  exports.AgentMetricsData = AgentMetricsData;
  exports.AgentMetricsCollectorHost = AgentMetricsCollectorHost;
  exports.AgentMetricsCollectorHostPtr = AgentMetricsCollectorHostPtr;
  exports.AgentMetricsCollectorHostAssociatedPtr = AgentMetricsCollectorHostAssociatedPtr;
})();