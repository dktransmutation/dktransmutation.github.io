// third_party/blink/public/mojom/prerender/prerender.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/prerender/prerender.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var referrer$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/loader/referrer.mojom', '../loader/referrer.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../../../../url/mojom/origin.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }



  function PrerenderAttributes(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrerenderAttributes.prototype.initDefaults_ = function() {
    this.url = null;
    this.relTypes = 0;
    this.referrer = null;
    this.initiatorOrigin = null;
    this.viewSize = null;
  };
  PrerenderAttributes.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrerenderAttributes.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrerenderAttributes.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PrerenderAttributes.referrer
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, referrer$.Referrer, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrerenderAttributes.initiatorOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrerenderAttributes.viewSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrerenderAttributes.encodedSize = codec.kStructHeaderSize + 40;

  PrerenderAttributes.decode = function(decoder) {
    var packed;
    var val = new PrerenderAttributes();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.relTypes =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.referrer =
        decoder.decodeStructPointer(referrer$.Referrer);
    val.initiatorOrigin =
        decoder.decodeStructPointer(origin$.Origin);
    val.viewSize =
        decoder.decodeStructPointer(geometry$.Size);
    return val;
  };

  PrerenderAttributes.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrerenderAttributes.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.Uint32, val.relTypes);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(referrer$.Referrer, val.referrer);
    encoder.encodeStructPointer(origin$.Origin, val.initiatorOrigin);
    encoder.encodeStructPointer(geometry$.Size, val.viewSize);
  };
  function PrerenderHandleClient_OnPrerenderStart_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrerenderHandleClient_OnPrerenderStart_Params.prototype.initDefaults_ = function() {
  };
  PrerenderHandleClient_OnPrerenderStart_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrerenderHandleClient_OnPrerenderStart_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrerenderHandleClient_OnPrerenderStart_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrerenderHandleClient_OnPrerenderStart_Params.decode = function(decoder) {
    var packed;
    var val = new PrerenderHandleClient_OnPrerenderStart_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrerenderHandleClient_OnPrerenderStart_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrerenderHandleClient_OnPrerenderStart_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrerenderHandleClient_OnPrerenderStopLoading_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrerenderHandleClient_OnPrerenderStopLoading_Params.prototype.initDefaults_ = function() {
  };
  PrerenderHandleClient_OnPrerenderStopLoading_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrerenderHandleClient_OnPrerenderStopLoading_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrerenderHandleClient_OnPrerenderStopLoading_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrerenderHandleClient_OnPrerenderStopLoading_Params.decode = function(decoder) {
    var packed;
    var val = new PrerenderHandleClient_OnPrerenderStopLoading_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrerenderHandleClient_OnPrerenderStopLoading_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrerenderHandleClient_OnPrerenderStopLoading_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrerenderHandleClient_OnPrerenderDomContentLoaded_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrerenderHandleClient_OnPrerenderDomContentLoaded_Params.prototype.initDefaults_ = function() {
  };
  PrerenderHandleClient_OnPrerenderDomContentLoaded_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrerenderHandleClient_OnPrerenderDomContentLoaded_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrerenderHandleClient_OnPrerenderDomContentLoaded_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrerenderHandleClient_OnPrerenderDomContentLoaded_Params.decode = function(decoder) {
    var packed;
    var val = new PrerenderHandleClient_OnPrerenderDomContentLoaded_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrerenderHandleClient_OnPrerenderDomContentLoaded_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrerenderHandleClient_OnPrerenderDomContentLoaded_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrerenderHandleClient_OnPrerenderStop_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrerenderHandleClient_OnPrerenderStop_Params.prototype.initDefaults_ = function() {
  };
  PrerenderHandleClient_OnPrerenderStop_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrerenderHandleClient_OnPrerenderStop_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrerenderHandleClient_OnPrerenderStop_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrerenderHandleClient_OnPrerenderStop_Params.decode = function(decoder) {
    var packed;
    var val = new PrerenderHandleClient_OnPrerenderStop_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrerenderHandleClient_OnPrerenderStop_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrerenderHandleClient_OnPrerenderStop_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrerenderHandle_Cancel_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrerenderHandle_Cancel_Params.prototype.initDefaults_ = function() {
  };
  PrerenderHandle_Cancel_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrerenderHandle_Cancel_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrerenderHandle_Cancel_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrerenderHandle_Cancel_Params.decode = function(decoder) {
    var packed;
    var val = new PrerenderHandle_Cancel_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrerenderHandle_Cancel_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrerenderHandle_Cancel_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrerenderHandle_Abandon_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrerenderHandle_Abandon_Params.prototype.initDefaults_ = function() {
  };
  PrerenderHandle_Abandon_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrerenderHandle_Abandon_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrerenderHandle_Abandon_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrerenderHandle_Abandon_Params.decode = function(decoder) {
    var packed;
    var val = new PrerenderHandle_Abandon_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrerenderHandle_Abandon_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrerenderHandle_Abandon_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrerenderProcessor_AddPrerender_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrerenderProcessor_AddPrerender_Params.prototype.initDefaults_ = function() {
    this.prerenderAttribute = null;
    this.prerenderHandleClient = new PrerenderHandleClientPtr();
    this.prerenderHandle = new bindings.InterfaceRequest();
  };
  PrerenderProcessor_AddPrerender_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrerenderProcessor_AddPrerender_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrerenderProcessor_AddPrerender_Params.prerenderAttribute
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PrerenderAttributes, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrerenderProcessor_AddPrerender_Params.prerenderHandleClient
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 8, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrerenderProcessor_AddPrerender_Params.prerenderHandle
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrerenderProcessor_AddPrerender_Params.encodedSize = codec.kStructHeaderSize + 24;

  PrerenderProcessor_AddPrerender_Params.decode = function(decoder) {
    var packed;
    var val = new PrerenderProcessor_AddPrerender_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.prerenderAttribute =
        decoder.decodeStructPointer(PrerenderAttributes);
    val.prerenderHandleClient =
        decoder.decodeStruct(new codec.Interface(PrerenderHandleClientPtr));
    val.prerenderHandle =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrerenderProcessor_AddPrerender_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrerenderProcessor_AddPrerender_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PrerenderAttributes, val.prerenderAttribute);
    encoder.encodeStruct(new codec.Interface(PrerenderHandleClientPtr), val.prerenderHandleClient);
    encoder.encodeStruct(codec.InterfaceRequest, val.prerenderHandle);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kPrerenderHandleClient_OnPrerenderStart_Name = 0;
  var kPrerenderHandleClient_OnPrerenderStopLoading_Name = 1;
  var kPrerenderHandleClient_OnPrerenderDomContentLoaded_Name = 2;
  var kPrerenderHandleClient_OnPrerenderStop_Name = 3;

  function PrerenderHandleClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PrerenderHandleClient,
                                                   handleOrPtrInfo);
  }

  function PrerenderHandleClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PrerenderHandleClient, associatedInterfacePtrInfo);
  }

  PrerenderHandleClientAssociatedPtr.prototype =
      Object.create(PrerenderHandleClientPtr.prototype);
  PrerenderHandleClientAssociatedPtr.prototype.constructor =
      PrerenderHandleClientAssociatedPtr;

  function PrerenderHandleClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  PrerenderHandleClientPtr.prototype.onPrerenderStart = function() {
    return PrerenderHandleClientProxy.prototype.onPrerenderStart
        .apply(this.ptr.getProxy(), arguments);
  };

  PrerenderHandleClientProxy.prototype.onPrerenderStart = function() {
    var params_ = new PrerenderHandleClient_OnPrerenderStart_Params();
    var builder = new codec.MessageV0Builder(
        kPrerenderHandleClient_OnPrerenderStart_Name,
        codec.align(PrerenderHandleClient_OnPrerenderStart_Params.encodedSize));
    builder.encodeStruct(PrerenderHandleClient_OnPrerenderStart_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrerenderHandleClientPtr.prototype.onPrerenderStopLoading = function() {
    return PrerenderHandleClientProxy.prototype.onPrerenderStopLoading
        .apply(this.ptr.getProxy(), arguments);
  };

  PrerenderHandleClientProxy.prototype.onPrerenderStopLoading = function() {
    var params_ = new PrerenderHandleClient_OnPrerenderStopLoading_Params();
    var builder = new codec.MessageV0Builder(
        kPrerenderHandleClient_OnPrerenderStopLoading_Name,
        codec.align(PrerenderHandleClient_OnPrerenderStopLoading_Params.encodedSize));
    builder.encodeStruct(PrerenderHandleClient_OnPrerenderStopLoading_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrerenderHandleClientPtr.prototype.onPrerenderDomContentLoaded = function() {
    return PrerenderHandleClientProxy.prototype.onPrerenderDomContentLoaded
        .apply(this.ptr.getProxy(), arguments);
  };

  PrerenderHandleClientProxy.prototype.onPrerenderDomContentLoaded = function() {
    var params_ = new PrerenderHandleClient_OnPrerenderDomContentLoaded_Params();
    var builder = new codec.MessageV0Builder(
        kPrerenderHandleClient_OnPrerenderDomContentLoaded_Name,
        codec.align(PrerenderHandleClient_OnPrerenderDomContentLoaded_Params.encodedSize));
    builder.encodeStruct(PrerenderHandleClient_OnPrerenderDomContentLoaded_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrerenderHandleClientPtr.prototype.onPrerenderStop = function() {
    return PrerenderHandleClientProxy.prototype.onPrerenderStop
        .apply(this.ptr.getProxy(), arguments);
  };

  PrerenderHandleClientProxy.prototype.onPrerenderStop = function() {
    var params_ = new PrerenderHandleClient_OnPrerenderStop_Params();
    var builder = new codec.MessageV0Builder(
        kPrerenderHandleClient_OnPrerenderStop_Name,
        codec.align(PrerenderHandleClient_OnPrerenderStop_Params.encodedSize));
    builder.encodeStruct(PrerenderHandleClient_OnPrerenderStop_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PrerenderHandleClientStub(delegate) {
    this.delegate_ = delegate;
  }
  PrerenderHandleClientStub.prototype.onPrerenderStart = function() {
    return this.delegate_ && this.delegate_.onPrerenderStart && this.delegate_.onPrerenderStart();
  }
  PrerenderHandleClientStub.prototype.onPrerenderStopLoading = function() {
    return this.delegate_ && this.delegate_.onPrerenderStopLoading && this.delegate_.onPrerenderStopLoading();
  }
  PrerenderHandleClientStub.prototype.onPrerenderDomContentLoaded = function() {
    return this.delegate_ && this.delegate_.onPrerenderDomContentLoaded && this.delegate_.onPrerenderDomContentLoaded();
  }
  PrerenderHandleClientStub.prototype.onPrerenderStop = function() {
    return this.delegate_ && this.delegate_.onPrerenderStop && this.delegate_.onPrerenderStop();
  }

  PrerenderHandleClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPrerenderHandleClient_OnPrerenderStart_Name:
      var params = reader.decodeStruct(PrerenderHandleClient_OnPrerenderStart_Params);
      this.onPrerenderStart();
      return true;
    case kPrerenderHandleClient_OnPrerenderStopLoading_Name:
      var params = reader.decodeStruct(PrerenderHandleClient_OnPrerenderStopLoading_Params);
      this.onPrerenderStopLoading();
      return true;
    case kPrerenderHandleClient_OnPrerenderDomContentLoaded_Name:
      var params = reader.decodeStruct(PrerenderHandleClient_OnPrerenderDomContentLoaded_Params);
      this.onPrerenderDomContentLoaded();
      return true;
    case kPrerenderHandleClient_OnPrerenderStop_Name:
      var params = reader.decodeStruct(PrerenderHandleClient_OnPrerenderStop_Params);
      this.onPrerenderStop();
      return true;
    default:
      return false;
    }
  };

  PrerenderHandleClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePrerenderHandleClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPrerenderHandleClient_OnPrerenderStart_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrerenderHandleClient_OnPrerenderStart_Params;
      break;
      case kPrerenderHandleClient_OnPrerenderStopLoading_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrerenderHandleClient_OnPrerenderStopLoading_Params;
      break;
      case kPrerenderHandleClient_OnPrerenderDomContentLoaded_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrerenderHandleClient_OnPrerenderDomContentLoaded_Params;
      break;
      case kPrerenderHandleClient_OnPrerenderStop_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrerenderHandleClient_OnPrerenderStop_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePrerenderHandleClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PrerenderHandleClient = {
    name: 'blink.mojom.PrerenderHandleClient',
    kVersion: 0,
    ptrClass: PrerenderHandleClientPtr,
    proxyClass: PrerenderHandleClientProxy,
    stubClass: PrerenderHandleClientStub,
    validateRequest: validatePrerenderHandleClientRequest,
    validateResponse: null,
  };
  PrerenderHandleClientStub.prototype.validator = validatePrerenderHandleClientRequest;
  PrerenderHandleClientProxy.prototype.validator = null;
  var kPrerenderHandle_Cancel_Name = 0;
  var kPrerenderHandle_Abandon_Name = 1;

  function PrerenderHandlePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PrerenderHandle,
                                                   handleOrPtrInfo);
  }

  function PrerenderHandleAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PrerenderHandle, associatedInterfacePtrInfo);
  }

  PrerenderHandleAssociatedPtr.prototype =
      Object.create(PrerenderHandlePtr.prototype);
  PrerenderHandleAssociatedPtr.prototype.constructor =
      PrerenderHandleAssociatedPtr;

  function PrerenderHandleProxy(receiver) {
    this.receiver_ = receiver;
  }
  PrerenderHandlePtr.prototype.cancel = function() {
    return PrerenderHandleProxy.prototype.cancel
        .apply(this.ptr.getProxy(), arguments);
  };

  PrerenderHandleProxy.prototype.cancel = function() {
    var params_ = new PrerenderHandle_Cancel_Params();
    var builder = new codec.MessageV0Builder(
        kPrerenderHandle_Cancel_Name,
        codec.align(PrerenderHandle_Cancel_Params.encodedSize));
    builder.encodeStruct(PrerenderHandle_Cancel_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrerenderHandlePtr.prototype.abandon = function() {
    return PrerenderHandleProxy.prototype.abandon
        .apply(this.ptr.getProxy(), arguments);
  };

  PrerenderHandleProxy.prototype.abandon = function() {
    var params_ = new PrerenderHandle_Abandon_Params();
    var builder = new codec.MessageV0Builder(
        kPrerenderHandle_Abandon_Name,
        codec.align(PrerenderHandle_Abandon_Params.encodedSize));
    builder.encodeStruct(PrerenderHandle_Abandon_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PrerenderHandleStub(delegate) {
    this.delegate_ = delegate;
  }
  PrerenderHandleStub.prototype.cancel = function() {
    return this.delegate_ && this.delegate_.cancel && this.delegate_.cancel();
  }
  PrerenderHandleStub.prototype.abandon = function() {
    return this.delegate_ && this.delegate_.abandon && this.delegate_.abandon();
  }

  PrerenderHandleStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPrerenderHandle_Cancel_Name:
      var params = reader.decodeStruct(PrerenderHandle_Cancel_Params);
      this.cancel();
      return true;
    case kPrerenderHandle_Abandon_Name:
      var params = reader.decodeStruct(PrerenderHandle_Abandon_Params);
      this.abandon();
      return true;
    default:
      return false;
    }
  };

  PrerenderHandleStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePrerenderHandleRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPrerenderHandle_Cancel_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrerenderHandle_Cancel_Params;
      break;
      case kPrerenderHandle_Abandon_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrerenderHandle_Abandon_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePrerenderHandleResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PrerenderHandle = {
    name: 'blink.mojom.PrerenderHandle',
    kVersion: 0,
    ptrClass: PrerenderHandlePtr,
    proxyClass: PrerenderHandleProxy,
    stubClass: PrerenderHandleStub,
    validateRequest: validatePrerenderHandleRequest,
    validateResponse: null,
  };
  PrerenderHandleStub.prototype.validator = validatePrerenderHandleRequest;
  PrerenderHandleProxy.prototype.validator = null;
  var kPrerenderProcessor_AddPrerender_Name = 0;

  function PrerenderProcessorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PrerenderProcessor,
                                                   handleOrPtrInfo);
  }

  function PrerenderProcessorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PrerenderProcessor, associatedInterfacePtrInfo);
  }

  PrerenderProcessorAssociatedPtr.prototype =
      Object.create(PrerenderProcessorPtr.prototype);
  PrerenderProcessorAssociatedPtr.prototype.constructor =
      PrerenderProcessorAssociatedPtr;

  function PrerenderProcessorProxy(receiver) {
    this.receiver_ = receiver;
  }
  PrerenderProcessorPtr.prototype.addPrerender = function() {
    return PrerenderProcessorProxy.prototype.addPrerender
        .apply(this.ptr.getProxy(), arguments);
  };

  PrerenderProcessorProxy.prototype.addPrerender = function(prerenderAttribute, prerenderHandleClient, prerenderHandle) {
    var params_ = new PrerenderProcessor_AddPrerender_Params();
    params_.prerenderAttribute = prerenderAttribute;
    params_.prerenderHandleClient = prerenderHandleClient;
    params_.prerenderHandle = prerenderHandle;
    var builder = new codec.MessageV0Builder(
        kPrerenderProcessor_AddPrerender_Name,
        codec.align(PrerenderProcessor_AddPrerender_Params.encodedSize));
    builder.encodeStruct(PrerenderProcessor_AddPrerender_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PrerenderProcessorStub(delegate) {
    this.delegate_ = delegate;
  }
  PrerenderProcessorStub.prototype.addPrerender = function(prerenderAttribute, prerenderHandleClient, prerenderHandle) {
    return this.delegate_ && this.delegate_.addPrerender && this.delegate_.addPrerender(prerenderAttribute, prerenderHandleClient, prerenderHandle);
  }

  PrerenderProcessorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPrerenderProcessor_AddPrerender_Name:
      var params = reader.decodeStruct(PrerenderProcessor_AddPrerender_Params);
      this.addPrerender(params.prerenderAttribute, params.prerenderHandleClient, params.prerenderHandle);
      return true;
    default:
      return false;
    }
  };

  PrerenderProcessorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePrerenderProcessorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPrerenderProcessor_AddPrerender_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrerenderProcessor_AddPrerender_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePrerenderProcessorResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PrerenderProcessor = {
    name: 'blink.mojom.PrerenderProcessor',
    kVersion: 0,
    ptrClass: PrerenderProcessorPtr,
    proxyClass: PrerenderProcessorProxy,
    stubClass: PrerenderProcessorStub,
    validateRequest: validatePrerenderProcessorRequest,
    validateResponse: null,
  };
  PrerenderProcessorStub.prototype.validator = validatePrerenderProcessorRequest;
  PrerenderProcessorProxy.prototype.validator = null;
  exports.PrerenderAttributes = PrerenderAttributes;
  exports.PrerenderHandleClient = PrerenderHandleClient;
  exports.PrerenderHandleClientPtr = PrerenderHandleClientPtr;
  exports.PrerenderHandleClientAssociatedPtr = PrerenderHandleClientAssociatedPtr;
  exports.PrerenderHandle = PrerenderHandle;
  exports.PrerenderHandlePtr = PrerenderHandlePtr;
  exports.PrerenderHandleAssociatedPtr = PrerenderHandleAssociatedPtr;
  exports.PrerenderProcessor = PrerenderProcessor;
  exports.PrerenderProcessorPtr = PrerenderProcessorPtr;
  exports.PrerenderProcessorAssociatedPtr = PrerenderProcessorAssociatedPtr;
})();