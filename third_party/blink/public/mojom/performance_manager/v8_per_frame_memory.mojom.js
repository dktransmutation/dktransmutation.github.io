// third_party/blink/public/mojom/performance_manager/v8_per_frame_memory.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/performance_manager/v8_per_frame_memory.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../../../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }



  function V8IsolatedWorldMemoryUsage(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  V8IsolatedWorldMemoryUsage.MAIN_WORLD_ID = 0;
  V8IsolatedWorldMemoryUsage.prototype.initDefaults_ = function() {
    this.worldId = 0;
    this.bytesUsed = 0;
    this.stableId = null;
    this.humanReadableName = null;
  };
  V8IsolatedWorldMemoryUsage.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  V8IsolatedWorldMemoryUsage.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate V8IsolatedWorldMemoryUsage.stableId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate V8IsolatedWorldMemoryUsage.humanReadableName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  V8IsolatedWorldMemoryUsage.encodedSize = codec.kStructHeaderSize + 32;

  V8IsolatedWorldMemoryUsage.decode = function(decoder) {
    var packed;
    var val = new V8IsolatedWorldMemoryUsage();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.worldId =
        decoder.decodeStruct(codec.Int64);
    val.bytesUsed =
        decoder.decodeStruct(codec.Uint64);
    val.stableId =
        decoder.decodeStruct(codec.NullableString);
    val.humanReadableName =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  V8IsolatedWorldMemoryUsage.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(V8IsolatedWorldMemoryUsage.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.worldId);
    encoder.encodeStruct(codec.Uint64, val.bytesUsed);
    encoder.encodeStruct(codec.NullableString, val.stableId);
    encoder.encodeStruct(codec.NullableString, val.humanReadableName);
  };
  function PerFrameV8MemoryUsageData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PerFrameV8MemoryUsageData.prototype.initDefaults_ = function() {
    this.frameToken = null;
    this.associatedBytes = null;
  };
  PerFrameV8MemoryUsageData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PerFrameV8MemoryUsageData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PerFrameV8MemoryUsageData.frameToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PerFrameV8MemoryUsageData.associatedBytes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(V8IsolatedWorldMemoryUsage), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PerFrameV8MemoryUsageData.encodedSize = codec.kStructHeaderSize + 16;

  PerFrameV8MemoryUsageData.decode = function(decoder) {
    var packed;
    var val = new PerFrameV8MemoryUsageData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameToken =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.associatedBytes =
        decoder.decodeArrayPointer(new codec.PointerTo(V8IsolatedWorldMemoryUsage));
    return val;
  };

  PerFrameV8MemoryUsageData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PerFrameV8MemoryUsageData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.frameToken);
    encoder.encodeArrayPointer(new codec.PointerTo(V8IsolatedWorldMemoryUsage), val.associatedBytes);
  };
  function PerProcessV8MemoryUsageData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PerProcessV8MemoryUsageData.prototype.initDefaults_ = function() {
    this.unassociatedBytesUsed = 0;
    this.numUnassociatedContexts = 0;
    this.unassociatedContextBytesUsed = 0;
    this.associatedMemory = null;
  };
  PerProcessV8MemoryUsageData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PerProcessV8MemoryUsageData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;





    // validate PerProcessV8MemoryUsageData.associatedMemory
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 24, 8, new codec.PointerTo(PerFrameV8MemoryUsageData), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PerProcessV8MemoryUsageData.encodedSize = codec.kStructHeaderSize + 32;

  PerProcessV8MemoryUsageData.decode = function(decoder) {
    var packed;
    var val = new PerProcessV8MemoryUsageData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.unassociatedBytesUsed =
        decoder.decodeStruct(codec.Uint64);
    val.numUnassociatedContexts =
        decoder.decodeStruct(codec.Uint64);
    val.unassociatedContextBytesUsed =
        decoder.decodeStruct(codec.Uint64);
    val.associatedMemory =
        decoder.decodeArrayPointer(new codec.PointerTo(PerFrameV8MemoryUsageData));
    return val;
  };

  PerProcessV8MemoryUsageData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PerProcessV8MemoryUsageData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.unassociatedBytesUsed);
    encoder.encodeStruct(codec.Uint64, val.numUnassociatedContexts);
    encoder.encodeStruct(codec.Uint64, val.unassociatedContextBytesUsed);
    encoder.encodeArrayPointer(new codec.PointerTo(PerFrameV8MemoryUsageData), val.associatedMemory);
  };
  function V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Params.prototype.initDefaults_ = function() {
    this.mode = 0;
  };
  V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Params.mode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, V8PerFrameMemoryReporter.Mode);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Params.encodedSize = codec.kStructHeaderSize + 8;

  V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Params.decode = function(decoder) {
    var packed;
    var val = new V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.mode =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.mode);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_ResponseParams.prototype.initDefaults_ = function() {
    this.data = null;
  };
  V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_ResponseParams.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PerProcessV8MemoryUsageData, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStructPointer(PerProcessV8MemoryUsageData);
    return val;
  };

  V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PerProcessV8MemoryUsageData, val.data);
  };
  var kV8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Name = 0;

  function V8PerFrameMemoryReporterPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(V8PerFrameMemoryReporter,
                                                   handleOrPtrInfo);
  }

  function V8PerFrameMemoryReporterAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        V8PerFrameMemoryReporter, associatedInterfacePtrInfo);
  }

  V8PerFrameMemoryReporterAssociatedPtr.prototype =
      Object.create(V8PerFrameMemoryReporterPtr.prototype);
  V8PerFrameMemoryReporterAssociatedPtr.prototype.constructor =
      V8PerFrameMemoryReporterAssociatedPtr;

  function V8PerFrameMemoryReporterProxy(receiver) {
    this.receiver_ = receiver;
  }
  V8PerFrameMemoryReporterPtr.prototype.getPerFrameV8MemoryUsageData = function() {
    return V8PerFrameMemoryReporterProxy.prototype.getPerFrameV8MemoryUsageData
        .apply(this.ptr.getProxy(), arguments);
  };

  V8PerFrameMemoryReporterProxy.prototype.getPerFrameV8MemoryUsageData = function(mode) {
    var params_ = new V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Params();
    params_.mode = mode;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kV8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Name,
          codec.align(V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function V8PerFrameMemoryReporterStub(delegate) {
    this.delegate_ = delegate;
  }
  V8PerFrameMemoryReporterStub.prototype.getPerFrameV8MemoryUsageData = function(mode) {
    return this.delegate_ && this.delegate_.getPerFrameV8MemoryUsageData && this.delegate_.getPerFrameV8MemoryUsageData(mode);
  }

  V8PerFrameMemoryReporterStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  V8PerFrameMemoryReporterStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kV8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Name:
      var params = reader.decodeStruct(V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Params);
      this.getPerFrameV8MemoryUsageData(params.mode).then(function(response) {
        var responseParams =
            new V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_ResponseParams();
        responseParams.data = response.data;
        var builder = new codec.MessageV1Builder(
            kV8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Name,
            codec.align(V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateV8PerFrameMemoryReporterRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kV8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Name:
        if (message.expectsResponse())
          paramsClass = V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateV8PerFrameMemoryReporterResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kV8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_Name:
        if (message.isResponse())
          paramsClass = V8PerFrameMemoryReporter_GetPerFrameV8MemoryUsageData_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var V8PerFrameMemoryReporter = {
    name: 'blink.mojom.V8PerFrameMemoryReporter',
    kVersion: 0,
    ptrClass: V8PerFrameMemoryReporterPtr,
    proxyClass: V8PerFrameMemoryReporterProxy,
    stubClass: V8PerFrameMemoryReporterStub,
    validateRequest: validateV8PerFrameMemoryReporterRequest,
    validateResponse: validateV8PerFrameMemoryReporterResponse,
  };
  V8PerFrameMemoryReporter.Mode = {};
  V8PerFrameMemoryReporter.Mode.DEFAULT = 0;
  V8PerFrameMemoryReporter.Mode.EAGER = 1;
  V8PerFrameMemoryReporter.Mode.LAZY = 2;
  V8PerFrameMemoryReporter.Mode.MIN_VALUE = 0,
  V8PerFrameMemoryReporter.Mode.MAX_VALUE = 2,

  V8PerFrameMemoryReporter.Mode.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  V8PerFrameMemoryReporter.Mode.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  V8PerFrameMemoryReporterStub.prototype.validator = validateV8PerFrameMemoryReporterRequest;
  V8PerFrameMemoryReporterProxy.prototype.validator = validateV8PerFrameMemoryReporterResponse;
  exports.V8IsolatedWorldMemoryUsage = V8IsolatedWorldMemoryUsage;
  exports.PerFrameV8MemoryUsageData = PerFrameV8MemoryUsageData;
  exports.PerProcessV8MemoryUsageData = PerProcessV8MemoryUsageData;
  exports.V8PerFrameMemoryReporter = V8PerFrameMemoryReporter;
  exports.V8PerFrameMemoryReporterPtr = V8PerFrameMemoryReporterPtr;
  exports.V8PerFrameMemoryReporterAssociatedPtr = V8PerFrameMemoryReporterAssociatedPtr;
})();