// third_party/blink/public/mojom/devtools/inspector_issue.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/devtools/inspector_issue.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }
  var cookie_manager$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/cookie_manager.mojom', '../../../../../services/network/public/mojom/cookie_manager.mojom.js');
  }
  var blocked_by_response_reason$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/blocked_by_response_reason.mojom', '../../../../../services/network/public/mojom/blocked_by_response_reason.mojom.js');
  }
  var source_location$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/source_location.mojom', '../../../../../services/network/public/mojom/source_location.mojom.js');
  }
  var fetch_api_request$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/fetch/fetch_api_request.mojom', '../fetch/fetch_api_request.mojom.js');
  }


  var InspectorIssueCode = {};
  InspectorIssueCode.kSameSiteCookieIssue = 0;
  InspectorIssueCode.kMixedContentIssue = 1;
  InspectorIssueCode.kBlockedByResponseIssue = 2;
  InspectorIssueCode.kContentSecurityPolicyIssue = 3;
  InspectorIssueCode.MIN_VALUE = 0,
  InspectorIssueCode.MAX_VALUE = 3,

  InspectorIssueCode.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  InspectorIssueCode.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var HeavyAdResolutionStatus = {};
  HeavyAdResolutionStatus.kHeavyAdBlocked = 0;
  HeavyAdResolutionStatus.kHeavyAdWarning = 1;
  HeavyAdResolutionStatus.MIN_VALUE = 0,
  HeavyAdResolutionStatus.MAX_VALUE = 1,

  HeavyAdResolutionStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  HeavyAdResolutionStatus.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var HeavyAdReason = {};
  HeavyAdReason.kNetworkTotalLimit = 0;
  HeavyAdReason.kCpuTotalLimit = 1;
  HeavyAdReason.kCpuPeakLimit = 2;
  HeavyAdReason.MIN_VALUE = 0,
  HeavyAdReason.MAX_VALUE = 2,

  HeavyAdReason.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  HeavyAdReason.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var MixedContentResolutionStatus = {};
  MixedContentResolutionStatus.kMixedContentBlocked = 0;
  MixedContentResolutionStatus.kMixedContentAutomaticallyUpgraded = 1;
  MixedContentResolutionStatus.kMixedContentWarning = 2;
  MixedContentResolutionStatus.MIN_VALUE = 0,
  MixedContentResolutionStatus.MAX_VALUE = 2,

  MixedContentResolutionStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  MixedContentResolutionStatus.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var ContentSecurityPolicyViolationType = {};
  ContentSecurityPolicyViolationType.kInlineViolation = 0;
  ContentSecurityPolicyViolationType.kEvalViolation = 1;
  ContentSecurityPolicyViolationType.kURLViolation = 2;
  ContentSecurityPolicyViolationType.kTrustedTypesSinkViolation = 3;
  ContentSecurityPolicyViolationType.kTrustedTypesPolicyViolation = 4;
  ContentSecurityPolicyViolationType.MIN_VALUE = 0,
  ContentSecurityPolicyViolationType.MAX_VALUE = 4,

  ContentSecurityPolicyViolationType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    }
    return false;
  };

  ContentSecurityPolicyViolationType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var SameSiteCookieOperation = {};
  SameSiteCookieOperation.kSetCookie = 0;
  SameSiteCookieOperation.kReadCookie = 1;
  SameSiteCookieOperation.MIN_VALUE = 0,
  SameSiteCookieOperation.MAX_VALUE = 1,

  SameSiteCookieOperation.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  SameSiteCookieOperation.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var SameSiteCookieExclusionReason = {};
  SameSiteCookieExclusionReason.kExcludeSameSiteUnspecifiedTreatedAsLax = 0;
  SameSiteCookieExclusionReason.kExcludeSameSiteNoneInsecure = 1;
  SameSiteCookieExclusionReason.kExcludeSameSiteLax = 2;
  SameSiteCookieExclusionReason.kExcludeSameSiteStrict = 3;
  SameSiteCookieExclusionReason.MIN_VALUE = 0,
  SameSiteCookieExclusionReason.MAX_VALUE = 3,

  SameSiteCookieExclusionReason.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  SameSiteCookieExclusionReason.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var SameSiteCookieWarningReason = {};
  SameSiteCookieWarningReason.kWarnSameSiteUnspecifiedCrossSiteContext = 0;
  SameSiteCookieWarningReason.kWarnSameSiteNoneInsecure = 1;
  SameSiteCookieWarningReason.kWarnSameSiteUnspecifiedLaxAllowUnsafe = 2;
  SameSiteCookieWarningReason.kWarnSameSiteStrictLaxDowngradeStrict = 3;
  SameSiteCookieWarningReason.kWarnSameSiteStrictCrossDowngradeStrict = 4;
  SameSiteCookieWarningReason.kWarnSameSiteStrictCrossDowngradeLax = 5;
  SameSiteCookieWarningReason.kWarnSameSiteLaxCrossDowngradeStrict = 6;
  SameSiteCookieWarningReason.kWarnSameSiteLaxCrossDowngradeLax = 7;
  SameSiteCookieWarningReason.MIN_VALUE = 0,
  SameSiteCookieWarningReason.MAX_VALUE = 7,

  SameSiteCookieWarningReason.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    }
    return false;
  };

  SameSiteCookieWarningReason.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function AffectedCookie(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AffectedCookie.prototype.initDefaults_ = function() {
    this.name = null;
    this.path = null;
    this.domain = null;
  };
  AffectedCookie.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AffectedCookie.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AffectedCookie.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AffectedCookie.path
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AffectedCookie.domain
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AffectedCookie.encodedSize = codec.kStructHeaderSize + 24;

  AffectedCookie.decode = function(decoder) {
    var packed;
    var val = new AffectedCookie();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    val.path =
        decoder.decodeStruct(codec.String);
    val.domain =
        decoder.decodeStruct(codec.String);
    return val;
  };

  AffectedCookie.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AffectedCookie.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.String, val.path);
    encoder.encodeStruct(codec.String, val.domain);
  };
  function AffectedRequest(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AffectedRequest.prototype.initDefaults_ = function() {
    this.requestId = null;
    this.url = null;
  };
  AffectedRequest.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AffectedRequest.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AffectedRequest.requestId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AffectedRequest.url
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AffectedRequest.encodedSize = codec.kStructHeaderSize + 16;

  AffectedRequest.decode = function(decoder) {
    var packed;
    var val = new AffectedRequest();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.requestId =
        decoder.decodeStruct(codec.String);
    val.url =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  AffectedRequest.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AffectedRequest.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.requestId);
    encoder.encodeStruct(codec.NullableString, val.url);
  };
  function AffectedFrame(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AffectedFrame.prototype.initDefaults_ = function() {
    this.frameId = null;
  };
  AffectedFrame.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AffectedFrame.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AffectedFrame.frameId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AffectedFrame.encodedSize = codec.kStructHeaderSize + 8;

  AffectedFrame.decode = function(decoder) {
    var packed;
    var val = new AffectedFrame();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  AffectedFrame.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AffectedFrame.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.frameId);
  };
  function BlockedByResponseIssueDetails(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BlockedByResponseIssueDetails.prototype.initDefaults_ = function() {
    this.request = null;
    this.parentFrame = null;
    this.blockedFrame = null;
    this.reason = 0;
  };
  BlockedByResponseIssueDetails.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BlockedByResponseIssueDetails.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BlockedByResponseIssueDetails.request
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, AffectedRequest, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BlockedByResponseIssueDetails.parentFrame
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, AffectedFrame, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BlockedByResponseIssueDetails.blockedFrame
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, AffectedFrame, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BlockedByResponseIssueDetails.reason
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 24, blocked_by_response_reason$.BlockedByResponseReason);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BlockedByResponseIssueDetails.encodedSize = codec.kStructHeaderSize + 32;

  BlockedByResponseIssueDetails.decode = function(decoder) {
    var packed;
    var val = new BlockedByResponseIssueDetails();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.request =
        decoder.decodeStructPointer(AffectedRequest);
    val.parentFrame =
        decoder.decodeStructPointer(AffectedFrame);
    val.blockedFrame =
        decoder.decodeStructPointer(AffectedFrame);
    val.reason =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  BlockedByResponseIssueDetails.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BlockedByResponseIssueDetails.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(AffectedRequest, val.request);
    encoder.encodeStructPointer(AffectedFrame, val.parentFrame);
    encoder.encodeStructPointer(AffectedFrame, val.blockedFrame);
    encoder.encodeStruct(codec.Int32, val.reason);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function MixedContentIssueDetails(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MixedContentIssueDetails.prototype.initDefaults_ = function() {
    this.requestContext = 0;
    this.resolutionStatus = 0;
    this.insecureUrl = null;
    this.mainResourceUrl = null;
    this.request = null;
    this.frame = null;
  };
  MixedContentIssueDetails.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MixedContentIssueDetails.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MixedContentIssueDetails.requestContext
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, fetch_api_request$.RequestContextType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MixedContentIssueDetails.resolutionStatus
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, MixedContentResolutionStatus);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MixedContentIssueDetails.insecureUrl
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate MixedContentIssueDetails.mainResourceUrl
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate MixedContentIssueDetails.request
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, AffectedRequest, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MixedContentIssueDetails.frame
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, AffectedFrame, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MixedContentIssueDetails.encodedSize = codec.kStructHeaderSize + 40;

  MixedContentIssueDetails.decode = function(decoder) {
    var packed;
    var val = new MixedContentIssueDetails();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.requestContext =
        decoder.decodeStruct(codec.Int32);
    val.resolutionStatus =
        decoder.decodeStruct(codec.Int32);
    val.insecureUrl =
        decoder.decodeStruct(codec.String);
    val.mainResourceUrl =
        decoder.decodeStruct(codec.String);
    val.request =
        decoder.decodeStructPointer(AffectedRequest);
    val.frame =
        decoder.decodeStructPointer(AffectedFrame);
    return val;
  };

  MixedContentIssueDetails.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MixedContentIssueDetails.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.requestContext);
    encoder.encodeStruct(codec.Int32, val.resolutionStatus);
    encoder.encodeStruct(codec.String, val.insecureUrl);
    encoder.encodeStruct(codec.String, val.mainResourceUrl);
    encoder.encodeStructPointer(AffectedRequest, val.request);
    encoder.encodeStructPointer(AffectedFrame, val.frame);
  };
  function ContentSecurityPolicyIssueDetails(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ContentSecurityPolicyIssueDetails.prototype.initDefaults_ = function() {
    this.blockedUrl = null;
    this.violatedDirective = null;
    this.contentSecurityPolicyViolationType = 0;
    this.violatingNodeId = 0;
    this.frameAncestor = null;
    this.sourceLocation = null;
  };
  ContentSecurityPolicyIssueDetails.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ContentSecurityPolicyIssueDetails.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentSecurityPolicyIssueDetails.blockedUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentSecurityPolicyIssueDetails.violatedDirective
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentSecurityPolicyIssueDetails.contentSecurityPolicyViolationType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, ContentSecurityPolicyViolationType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentSecurityPolicyIssueDetails.frameAncestor
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, AffectedFrame, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentSecurityPolicyIssueDetails.sourceLocation
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, source_location$.SourceLocation, true);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ContentSecurityPolicyIssueDetails.encodedSize = codec.kStructHeaderSize + 40;

  ContentSecurityPolicyIssueDetails.decode = function(decoder) {
    var packed;
    var val = new ContentSecurityPolicyIssueDetails();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.blockedUrl =
        decoder.decodeStructPointer(url$.Url);
    val.violatedDirective =
        decoder.decodeStruct(codec.String);
    val.contentSecurityPolicyViolationType =
        decoder.decodeStruct(codec.Int32);
    val.violatingNodeId =
        decoder.decodeStruct(codec.Int32);
    val.frameAncestor =
        decoder.decodeStructPointer(AffectedFrame);
    val.sourceLocation =
        decoder.decodeStructPointer(source_location$.SourceLocation);
    return val;
  };

  ContentSecurityPolicyIssueDetails.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ContentSecurityPolicyIssueDetails.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.blockedUrl);
    encoder.encodeStruct(codec.String, val.violatedDirective);
    encoder.encodeStruct(codec.Int32, val.contentSecurityPolicyViolationType);
    encoder.encodeStruct(codec.Int32, val.violatingNodeId);
    encoder.encodeStructPointer(AffectedFrame, val.frameAncestor);
    encoder.encodeStructPointer(source_location$.SourceLocation, val.sourceLocation);
  };
  function SameSiteCookieIssueDetails(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SameSiteCookieIssueDetails.prototype.initDefaults_ = function() {
    this.cookie = null;
    this.exclusionReason = null;
    this.warningReason = null;
    this.operation = 0;
    this.siteForCookies = null;
    this.cookieUrl = null;
    this.request = null;
  };
  SameSiteCookieIssueDetails.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SameSiteCookieIssueDetails.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SameSiteCookieIssueDetails.cookie
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, AffectedCookie, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SameSiteCookieIssueDetails.exclusionReason
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 4, new codec.Enum(SameSiteCookieExclusionReason), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SameSiteCookieIssueDetails.warningReason
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 4, new codec.Enum(SameSiteCookieWarningReason), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SameSiteCookieIssueDetails.operation
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 24, SameSiteCookieOperation);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SameSiteCookieIssueDetails.siteForCookies
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SameSiteCookieIssueDetails.cookieUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SameSiteCookieIssueDetails.request
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, AffectedRequest, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SameSiteCookieIssueDetails.encodedSize = codec.kStructHeaderSize + 56;

  SameSiteCookieIssueDetails.decode = function(decoder) {
    var packed;
    var val = new SameSiteCookieIssueDetails();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.cookie =
        decoder.decodeStructPointer(AffectedCookie);
    val.exclusionReason =
        decoder.decodeArrayPointer(new codec.Enum(SameSiteCookieExclusionReason));
    val.warningReason =
        decoder.decodeArrayPointer(new codec.Enum(SameSiteCookieWarningReason));
    val.operation =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.siteForCookies =
        decoder.decodeStructPointer(url$.Url);
    val.cookieUrl =
        decoder.decodeStructPointer(url$.Url);
    val.request =
        decoder.decodeStructPointer(AffectedRequest);
    return val;
  };

  SameSiteCookieIssueDetails.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SameSiteCookieIssueDetails.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(AffectedCookie, val.cookie);
    encoder.encodeArrayPointer(new codec.Enum(SameSiteCookieExclusionReason), val.exclusionReason);
    encoder.encodeArrayPointer(new codec.Enum(SameSiteCookieWarningReason), val.warningReason);
    encoder.encodeStruct(codec.Int32, val.operation);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(url$.Url, val.siteForCookies);
    encoder.encodeStructPointer(url$.Url, val.cookieUrl);
    encoder.encodeStructPointer(AffectedRequest, val.request);
  };
  function InspectorIssueDetails(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InspectorIssueDetails.prototype.initDefaults_ = function() {
    this.samesiteCookieIssueDetails = null;
    this.mixedContentIssueDetails = null;
    this.blockedByResponseIssueDetails = null;
    this.cspIssueDetails = null;
  };
  InspectorIssueDetails.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InspectorIssueDetails.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InspectorIssueDetails.samesiteCookieIssueDetails
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, SameSiteCookieIssueDetails, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InspectorIssueDetails.mixedContentIssueDetails
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, MixedContentIssueDetails, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InspectorIssueDetails.blockedByResponseIssueDetails
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, BlockedByResponseIssueDetails, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InspectorIssueDetails.cspIssueDetails
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, ContentSecurityPolicyIssueDetails, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InspectorIssueDetails.encodedSize = codec.kStructHeaderSize + 32;

  InspectorIssueDetails.decode = function(decoder) {
    var packed;
    var val = new InspectorIssueDetails();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.samesiteCookieIssueDetails =
        decoder.decodeStructPointer(SameSiteCookieIssueDetails);
    val.mixedContentIssueDetails =
        decoder.decodeStructPointer(MixedContentIssueDetails);
    val.blockedByResponseIssueDetails =
        decoder.decodeStructPointer(BlockedByResponseIssueDetails);
    val.cspIssueDetails =
        decoder.decodeStructPointer(ContentSecurityPolicyIssueDetails);
    return val;
  };

  InspectorIssueDetails.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InspectorIssueDetails.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(SameSiteCookieIssueDetails, val.samesiteCookieIssueDetails);
    encoder.encodeStructPointer(MixedContentIssueDetails, val.mixedContentIssueDetails);
    encoder.encodeStructPointer(BlockedByResponseIssueDetails, val.blockedByResponseIssueDetails);
    encoder.encodeStructPointer(ContentSecurityPolicyIssueDetails, val.cspIssueDetails);
  };
  function InspectorIssueInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InspectorIssueInfo.prototype.initDefaults_ = function() {
    this.code = 0;
    this.details = null;
  };
  InspectorIssueInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InspectorIssueInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InspectorIssueInfo.code
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, InspectorIssueCode);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InspectorIssueInfo.details
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, InspectorIssueDetails, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InspectorIssueInfo.encodedSize = codec.kStructHeaderSize + 16;

  InspectorIssueInfo.decode = function(decoder) {
    var packed;
    var val = new InspectorIssueInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.code =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.details =
        decoder.decodeStructPointer(InspectorIssueDetails);
    return val;
  };

  InspectorIssueInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InspectorIssueInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.code);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(InspectorIssueDetails, val.details);
  };
  exports.InspectorIssueCode = InspectorIssueCode;
  exports.HeavyAdResolutionStatus = HeavyAdResolutionStatus;
  exports.HeavyAdReason = HeavyAdReason;
  exports.MixedContentResolutionStatus = MixedContentResolutionStatus;
  exports.ContentSecurityPolicyViolationType = ContentSecurityPolicyViolationType;
  exports.SameSiteCookieOperation = SameSiteCookieOperation;
  exports.SameSiteCookieExclusionReason = SameSiteCookieExclusionReason;
  exports.SameSiteCookieWarningReason = SameSiteCookieWarningReason;
  exports.AffectedCookie = AffectedCookie;
  exports.AffectedRequest = AffectedRequest;
  exports.AffectedFrame = AffectedFrame;
  exports.BlockedByResponseIssueDetails = BlockedByResponseIssueDetails;
  exports.MixedContentIssueDetails = MixedContentIssueDetails;
  exports.ContentSecurityPolicyIssueDetails = ContentSecurityPolicyIssueDetails;
  exports.SameSiteCookieIssueDetails = SameSiteCookieIssueDetails;
  exports.InspectorIssueDetails = InspectorIssueDetails;
  exports.InspectorIssueInfo = InspectorIssueInfo;
})();